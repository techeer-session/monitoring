services:
  django:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      OTEL_SERVICE_NAME: django-service
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED: true
      JAEGER_ENDPOINT: http://jaeger:4317/
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672/
      OTEL_LOGS_EXPORTER: otlp
    depends_on:
      - redis
      - otel-collector
      - db
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
    labels:
      logging: "promtail"
      logging_jobname: "django_logs"

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      environment:
      CELERY_BROKER_API_URL: http://guest:guest@rabbitmq:15672/api/
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672/
      OTEL_SERVICE_NAME: celery-worker
      JAEGER_ENDPOINT: http://jaeger:4317/
      OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED: true
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_LOGS_EXPORTER: otlp
      DB_HOST: db
    ports:
      - '5555:5555'
    depends_on:
      - redis
      - otel-collector
      - db
    command: sh -c "sh start_celery_flower.sh"
    volumes:
      - ./backend:/app

  db:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
  
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest

  jaeger:
    image: jaegertracing/all-in-one
    ports:
      - "16686:16686" # web
      - "14268:14268" # http
      - "14250:14250" # grpc

  otel-collector:
    image: otel/opentelemetry-collector-contrib
    ports:
      - "4317:4317" # grpc
      - "55681:55681" # http
    volumes:
      - ./opentelemetry/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: ["--config", "/etc/otel-collector-config.yaml"]
  
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
  
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  node_exporter:
    image: quay.io/prometheus/node-exporter:v1.8.1
    container_name: node_exporter
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'

  grafana:
    image: grafana/grafana:9.5.20
    user: root
    volumes:
      - grafan_data:/etc/grafana/provisioning
      - grafan_data:/var/lib/grafana
    ports:
      - "3000:3000"
  
  loki:
    image: grafana/loki:latest
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/local-config.yaml
  
  promtail:
    image:  grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./promtail/config.yaml:/etc/promtail/docker-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - -config.file=/etc/promtail/docker-config.yaml
      - -config.expand-env=true
  
  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
  
volumes:
  postgres_data:
  grafan_data:
  portainer_data: